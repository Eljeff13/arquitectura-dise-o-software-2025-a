@startuml MVC Class Diagram

' Model Classes
abstract class BaseModel {
    #id: int
    #status: string
    #created_at: datetime
    #updated_at: datetime
    #deleted_at: datetime
    #created_by: int
    #updated_by: int
    #deleted_by: int
    +getId(): int
    +setId(id: int): void
    +getStatus(): string
    +setStatus(status: string): void
    +getCreatedAt(): datetime
    +setCreatedAt(created_at: datetime): void
    +getUpdatedAt(): datetime
    +setUpdatedAt(updated_at: datetime): void
    +getDeletedAt(): datetime
    +setDeletedAt(deleted_at: datetime): void
    +getCreatedBy(): int
    +setCreatedBy(created_by: int): void
    +getUpdatedBy(): int
    +setUpdatedBy(updated_by: int): void
    +getDeletedBy(): int
    +setDeletedBy(deleted_by: int): void
}

class Producto extends BaseModel {
    -nombre: string
    -precio: decimal
    -stock: int
    -categoriaId: int
    +getNombre(): string
    +setNombre(nombre: string): void
    +getPrecio(): decimal
    +setPrecio(precio: decimal): void
    +getStock(): int
    +setStock(stock: int): void
    +actualizarStock(cantidad: int): void
}

class Categoria extends BaseModel {
    -nombre: string
    -descripcion: string
    +getNombre(): string
    +setNombre(nombre: string): void
    +getDescripcion(): string
    +setDescripcion(descripcion: string): void
}

class Cliente extends BaseModel {
    -nombre: string
    -email: string
    -telefono: string
    +getNombre(): string
    +setNombre(nombre: string): void
    +getEmail(): string
    +setEmail(email: string): void
    +getTelefono(): string
    +setTelefono(telefono: string): void
}

class Factura extends BaseModel {
    -clienteId: int
    -fecha: date
    -total: decimal
    +getClienteId(): int
    +setClienteId(clienteId: int): void
    +getFecha(): date
    +setFecha(fecha: date): void
    +getTotal(): decimal
    +setTotal(total: decimal): void
    +calcularTotal(): decimal
}

class DetalleFactura extends BaseModel {
    -facturaId: int
    -productoId: int
    -cantidad: int
    -precioUnitario: decimal
    +getFacturaId(): int
    +setFacturaId(facturaId: int): void
    +getProductoId(): int
    +setProductoId(productoId: int): void
    +getCantidad(): int
    +setCantidad(cantidad: int): void
    +getPrecioUnitario(): decimal
    +setPrecioUnitario(precio: decimal): void
    +calcularSubtotal(): decimal
}

' Controller Classes
abstract class BaseController {
    #model: BaseModel
    +create(data: Map): void
    +read(id: int): BaseModel
    +update(id: int, data: Map): void
    +delete(id: int): void
}

class ProductoController extends BaseController {
    +listarProductos(): List<Producto>
    +buscarPorCategoria(categoriaId: int): List<Producto>
    +actualizarStock(productoId: int, cantidad: int): void
}

class CategoriaController extends BaseController {
    +listarCategorias(): List<Categoria>
    +buscarPorNombre(nombre: string): List<Categoria>
}

class ClienteController extends BaseController {
    +listarClientes(): List<Cliente>
    +buscarPorEmail(email: string): Cliente
}

class FacturaController extends BaseController {
    +listarFacturas(): List<Factura>
    +listarFacturasPorCliente(clienteId: int): List<Factura>
    +generarFactura(clienteId: int, detalles: List<DetalleFactura>): Factura
}

class DetalleFacturaController extends BaseController {
    +listarDetallesPorFactura(facturaId: int): List<DetalleFactura>
    +agregarDetalle(facturaId: int, productoId: int, cantidad: int): void
}

' View Classes
abstract class BaseView {
    #controller: BaseController
    +render(data: any): void
    +showError(message: string): void
    +showSuccess(message: string): void
}

class ProductoView extends BaseView {
    +mostrarListaProductos(productos: List<Producto>): void
    +mostrarFormularioProducto(producto: Producto): void
    +mostrarDetalleProducto(producto: Producto): void
}

class CategoriaView extends BaseView {
    +mostrarListaCategorias(categorias: List<Categoria>): void
    +mostrarFormularioCategoria(categoria: Categoria): void
}

class ClienteView extends BaseView {
    +mostrarListaClientes(clientes: List<Cliente>): void
    +mostrarFormularioCliente(cliente: Cliente): void
    +mostrarDetalleCliente(cliente: Cliente): void
}

class FacturaView extends BaseView {
    +mostrarListaFacturas(facturas: List<Factura>): void
    +mostrarFormularioFactura(factura: Factura): void
    +mostrarDetalleFactura(factura: Factura): void
}

class DetalleFacturaView extends BaseView {
    +mostrarDetallesFactura(detalles: List<DetalleFactura>): void
    +mostrarFormularioDetalle(detalle: DetalleFactura): void
}

' Relationships
Producto --> Categoria : belongs to
Factura --> Cliente : belongs to
Factura --> DetalleFactura : contains
DetalleFactura --> Producto : references

ProductoController --> Producto : manages
CategoriaController --> Categoria : manages
ClienteController --> Cliente : manages
FacturaController --> Factura : manages
DetalleFacturaController --> DetalleFactura : manages

ProductoView --> ProductoController : uses
CategoriaView --> CategoriaController : uses
ClienteView --> ClienteController : uses
FacturaView --> FacturaController : uses
DetalleFacturaView --> DetalleFacturaController : uses

@enduml 